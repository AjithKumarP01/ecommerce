server:
  port: 8888

spring:
  application:
    name: config-server

  cloud:
    config:
      server:
        git:
          # This is crucial. You need to create a separate GitHub repository
          # specifically for your microservices' configurations.
          # Replace 'your-username' with your actual GitHub username.
          # I recommend naming it something like 'ecommerce-config-repo'.
          uri: https://github.com/AjithKumarP01/ecommerce-config-repo.git #https://github.com/AjithKumarP01/ecommerce-config-repo.git
          username: AjithKumarP01 # Your Git username (e.g., GitHub username)
          password: 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
          #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
          default-label: main # Or 'master' if your repo uses that default branch name
            # Optional: specify search paths within the config repository.
            # This can be useful if you organize configs into subfolders per service.
            # search-paths:
            #   - 'user-service-configs'
            #   - 'product-service-configs'
          # If you don't specify, it will look directly in the root of the repo.
          # For now, let's assume configs are at the root for simplicity.

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka # Point to your running Eureka server
    enabled: true # Ensure the Config Server registers with Eureka

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always # Show details in health endpoint

logging:
  level:
    root: INFO
    org.springframework.cloud.config: DEBUG
    org.springframework.cloud.config.server: DEBUG
    org.springframework.web: DEBUG